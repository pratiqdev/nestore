declare global {
    interface Window {
      nestore?: () => unknown;
    }
}

export type MakeDataPropsOptional<T> = {
  [K in keyof T]: {
    [P in keyof T[K]]: Partial<T[K][P]> | undefined;
  }
};

export type ProxyObject<T> = {
    [K in keyof T]: T[K] extends Record<string | number, unknown>
        ? ProxyObject<T[K]>
        : T[K];
};

export type NestoreOptions = {
  /** Enable internal debugging of state and methods.  
   * Has same effect as setting env variable `DEBUG=@nst`
   */
  debug?: boolean;
}


// extend the nestore return with any props
export type AnyRecordProps = { [prop: string]: any; }

// export type NestoreReturn<T> = {
//     [K in keyof T]?: T[K];
//   } & {
//     get: <K extends keyof T>(keyOrGetterFunc?: string | T[K] | GetterFunc<T>) => typeof keyOrGetterFunc extends undefined | null ? T[K] : T;
//     set: <K extends keyof T>(key: K, valueOrSetterFunc: T[K] | SetterFunc<T, K>) => boolean;
//     reset: () => void;
//     store: Partial<T>;
//   } & AnyRecordProps


// export type NestoreReturn<T> = {
//   [K in keyof T]?: T[K];
// } & {
//   get: <K extends keyof T>(keyOrGetterFunc?: string | ((store: T) => T[K])) => typeof keyOrGetterFunc extends string ? T[K] : T;
//   set: <K extends keyof T>(key: K, valueOrSetterFunc: T[K] | ((store: T) => T[K] | undefined)) => boolean;
//   reset: () => void;
//   store: Partial<T>;
// } & AnyRecordProps


export type NestoreReturn<T extends object> = {
  [K in keyof T]: T[K];
} & {
  get: {
    <K extends keyof T>(key: K): T[K];
    <K extends keyof T>(func: (store: Partial<T>) => T[K]): ReturnType<typeof func>;
  };
  set: <K extends keyof T>(key: K, valueOrSetterFunc: T[K] | SetterFunc<T, K>) => boolean;
  reset: () => void;
  store: Partial<T>;
} & AnyRecordProps;


export type BaseRecord = {
    [key: string]: any;
  };


  
export type StoreInitializer<T extends BaseRecord> = (proxyRef: Partial<T>) => T;
  

  
// Define the state manager types
export type Store = Record<string, any>;
export type GetterFunc<T> = (store: Partial<T>) => T | T[keyof T];
export type SetterFunc<T, K extends keyof T> = (store: Partial<T>) => T[K] | undefined;

// Define the event emitter types
export type Listener = (event: any) => void;
export type Event = string;
